{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/Form.js","components/Application.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","profile","avatar_url","name","company","CardList","profiles","map","key","id","Form","useState","userName","setUserName","handleSubmit","event","a","preventDefault","axios","get","response","onSubmit","data","required","type","placeholder","value","onChange","target","Application","gProfiles","setGProfiles","title","newGProfile","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kRAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCJSC,EAZF,SAACC,GACV,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,qBAAqBC,IAAKH,EAAMI,QAAQC,aACjD,yBAAKJ,UAAU,QACX,yBAAKA,UAAU,QAAQD,EAAMI,QAAQE,MACrC,yBAAKL,UAAU,WAAWD,EAAMI,QAAQG,YCEzCC,G,MANE,SAACR,GAAD,OACb,6BACKA,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAI,kBAAC,EAAD,CAAMO,IAAKP,EAAQQ,GAAIR,QAAO,eAAMA,W,yCCqB5DS,EAxBF,SAACb,GAAW,IAAD,EAEYc,qBAFZ,mBAEbC,EAFa,KAEHC,EAFG,KAIdC,EAAY,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACjBD,EAAME,iBADW,SAEMC,IAAMC,IAAN,uCAA0CP,IAFhD,OAEXQ,EAFW,OAGjBvB,EAAMwB,SAASD,EAASE,MACxBT,EAAY,IAJK,2CAAH,sDAOlB,OACI,0BAAMQ,SAAUP,GACZ,2BACIS,UAAQ,EACRC,KAAK,OACLC,YAAY,kBACZC,MAAOd,EACPe,SAAU,SAAAZ,GAAK,OAAIF,EAAYE,EAAMa,OAAOF,UAChD,8CCDGG,G,MAhBK,SAAChC,GAAW,IAAD,EACOc,mBAAS,IADhB,mBACpBmB,EADoB,KACTC,EADS,KAO3B,OACI,6BACI,yBAAKjC,UAAU,UAAUD,EAAMmC,OAC/B,kBAAC,EAAD,CAAMX,SAPS,SAACY,GACpBF,EAAa,GAAD,mBAAKD,GAAL,CAAgBG,QAOxB,kBAAC,EAAD,CAAU3B,SAAUwB,O,MCThCI,IAASC,OACP,kBAAC,EAAD,CAAaH,MAAM,yBACnBI,SAASC,eAAe,SL0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.872ea9ca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"github-profile\">\r\n            <img alt=\"GitHub user avatar\" src={props.profile.avatar_url} />\r\n            <div className=\"info\">\r\n                <div className=\"name\">{props.profile.name}</div>\r\n                <div className=\"company\">{props.profile.company}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from './Card.js';\r\nimport '../styles/Card.css';\r\n\r\nconst CardList = (props) => (\r\n    <div>\r\n        {props.profiles.map(profile => <Card key={profile.id} profile={{...profile}} />)}\r\n    </div>\r\n);\r\n\r\nexport default CardList;","import React, {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Form = (props) => {\r\n\r\n    const [userName, setUserName] = useState();\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        const response = await axios.get(`https://api.github.com/users/${userName}`);\r\n        props.onSubmit(response.data);\r\n        setUserName('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                required\r\n                type=\"text\"\r\n                placeholder=\"GitHub username\"\r\n                value={userName}\r\n                onChange={event => setUserName(event.target.value)} />\r\n            <button>Add card</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React, {useState} from 'react';\r\nimport CardList from './CardList.js';\r\nimport Form from './Form.js';\r\nimport '../styles/Form.css';\r\n\r\nconst Application = (props) => {\r\n    const [gProfiles, setGProfiles] = useState([]);\r\n\r\n    const appendGProfile = (newGProfile) => {\r\n        setGProfiles([...gProfiles, newGProfile]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header\">{props.title}</div>\r\n            <Form onSubmit={appendGProfile} />\r\n            <CardList profiles={gProfiles} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Application;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport Application from './components/Application.js';\nimport './styles/Application.css';\n\nReactDOM.render(\n  <Application title=\"The GitHub Cards App\" />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}